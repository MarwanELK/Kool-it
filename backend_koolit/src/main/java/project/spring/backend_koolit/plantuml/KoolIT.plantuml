@startuml

class Ingredient {
  - ingredientId: Long
  - nom: String
  - type: TypeIngredient

  + Ingredient()
  + Ingredient(ingredientId: Long, nom: String, type: TypeIngredient)
  + getIngredientId(): Long
  + setIngredientId(ingredientId: Long): void
  + getNom(): String
  + setNom(nom: String): void
  + getType(): TypeIngredient
  + setType(type: TypeIngredient): void
}

enum TypeIngredient {
  Legume, Fruit, Viande, Boisson, Céréales, Laitier, Poisson, Oeuf, Gras, Sucré
}

class ListeCourse {
  - id: Long
  - utilisateurId: Long
  - ingredients: String
  - ingredientsList: List<String>

  + ListeCourse()
  + ListeCourse(utilisateurId: Long, ingredients: String)
  + getId(): Long
  + setId(id: Long): void
  + getUtilisateurId(): Long
  + setUtilisateurId(utilisateurId: Long): void
  + getIngredients(): String
  + setIngredients(ingredients: String): void
  + getIngredientsList(): List<String>
  + setIngredientsList(ingredientsList: List<String>): void
}

class Magasin {
  - id: Long
  - nom: String
  - typeMagasin: String
  - urlMagasin: String
  - typeAliment: String

  + Magasin()
  + Magasin(nom: String, typeMagasin: String, urlMagasin: String, typeAliment: String)
  + getId(): Long
  + setId(id: Long): void
  + getNom(): String
  + setNom(nom: String): void
  + getTypeMagasin(): String
  + setTypeMagasin(typeMagasin: String): void
  + getUrlMagasin(): String
  + setUrlMagasin(urlMagasin: String): void
  + getTypeAliment(): String
  + setTypeAliment(typeAliment: String): void
}

class Recette {
  - recetteId: Long
  - nom: String
  - note: double
  - notes: List<Double>
  - ingredients: List<Ingredient>
  - photoPath: String
  - etapesPreparation: List<String>

  + Recette()
  + getRecetteId(): Long
  + setRecetteId(recetteId: Long): void
  + getNom(): String
  + setNom(nom: String): void
  + getNote(): double
  + setNote(note: double): void
  + getNotes(): List<Double>
  + setNotes(notes: List<Double>): void
  + getIngredients(): List<Ingredient>
  + setIngredients(ingredients: List<Ingredient>): void
  + getPhotoPath(): String
  + setPhotoPath(photoPath: String): void
  + getEtapesPreparation(): List<String>
  + setEtapesPreparation(etapesPreparation: List<String>): void
}

class ListeCourseController {
  - listeCourseService: ListeCourseService

  + ListeCourseController(listeCourseService: ListeCourseService)
  + getAllListesCourses(): List<ListeCourse>
  + getListesCourseByUtilisateur(idUtilisateur: Long): List<ListeCourse>
  + ajouterListeCourse(nouvelleListeCourse: ListeCourse): ResponseEntity<ListeCourse>
  + supprimerIngredient(id: Long): ResponseEntity<?>
}

class MagasinController {
  - magasinService: MagasinService

  + MagasinController(magasinService: MagasinService)
  + getAllMagasins(): ResponseEntity<List<Magasin>>
  + getMagasinById(id: Long): ResponseEntity<Magasin>
  + ajouterMagasin(magasin: Magasin): ResponseEntity<Magasin>
  + modifierMagasin(id: Long, magasin: Magasin): ResponseEntity<Magasin>
  + supprimerMagasin(id: Long): ResponseEntity<Void>
  + rechercherMagasinParNom(nom: String): ResponseEntity<List<Magasin>>
  + getTypeAliment(nom: String): ResponseEntity<List<String>>
  + ajouterTypeAliment(nom: String, typeAliment: String): ResponseEntity<Void>
}

class RecetteController {
  - recetteService: RecetteService

  + RecetteController(recetteService: RecetteService)
  + getAllRecettes(): List<Recette>
  + findIngredientByRecetteId(id: Long): Recette
  + noterRecette(recetteId: Long, note: Double): ResponseEntity<Recette>
  + augmenterPart(recetteId: Long, nbPersonnes: Integer): ResponseEntity<Recette>
}

class ListeCourseService {
  - listeCourseRepository: ListeCourseRepository

  + ListeCourseService(listeCourseRepository: ListeCourseRepository)
  + getAllListesCourse(): List<ListeCourse>
  + getListesCourseByUtilisateur(idUtilisateur: Long): List<ListeCourse>
  + ajouterListeCourse(idUtilisateur: Long, nouveauxIngredients: List<String>): ListeCourse
  + convertStringIngredientsToList(listesCourses: List<ListeCourse>): List<ListeCourse>
  + ajouterListeCourse(nouvelleListeCourse: ListeCourse): ListeCourse
  + supprimerIngredient(id: Long): void
}

class MagasinService {
  - magasinRepository: MagasinRepository

  + MagasinService(magasinRepository: MagasinRepository)
  + getAllMagasins(): List<Magasin>
  + getMagasinById(id: Long): Magasin
  + ajouterMagasin(magasin: Magasin): Magasin
  + modifierMagasin(id: Long, magasin: Magasin): Magasin
  + supprimerMagasin(id: Long): void
  + rechercherMagasinParNom(nom: String): List<Magasin>
  + getMagasinByNom(nom: String): Magasin
}

class RecetteService {
  - repository: RecetteRepository

  + RecetteService(repository: RecetteRepository)
  + findRecetteByRecetteId(id: Long): Recette
  + findAllRecettes(): List<Recette>
  + findIngredientByRecetteId(id: Long): List<Ingredient>
  + getAllRecettes(): List<Recette>
  + noterRecette(recetteId: Long, note: Double): Recette
  + augmenterPart(recetteId: Long, nbPersonnes: Integer): Recette
  + calculerMoyenneNotes(notes: List<Double>): Double
}

class IngredientRepository {
  + findByNom(nom: String): Ingredient
}

class ListeCourseRepository {
  + findByUtilisateurId(idUtilisateur: Long): List<ListeCourse>
}

class MagasinRepository {
  + findByNomContainingIgnoreCase(nomMagasin: String): List<Magasin>
  + findByNom(nom: String): Optional<Magasin>
}

class RecetteRepository {
  + findRecetteByRecetteId(id: Long): Recette
  + findIngredientByRecetteId(id: Long): List<Recette>
  + findAll(): List<Recette>
}

ListeCourseController -- ListeCourseService
MagasinController -- MagasinService
RecetteController -- RecetteService

ListeCourseService -- ListeCourseRepository
MagasinService -- MagasinRepository
RecetteService -- RecetteRepository

Recette -- Ingredient : Composition
Recette -- Magasin : Association

@enduml
